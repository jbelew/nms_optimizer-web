name: Test and Deploy to Heroku

on:
  workflow_run:
    workflows: ["Release"]
    types: [completed]
    branches: [main]

jobs:
  get_release_info:
    runs-on: ubuntu-latest
    outputs:
      conclusion: ${{ steps.get_workflow_info.outputs.conclusion }}
      head_sha: ${{ steps.get_workflow_info.outputs.head_sha }}
      next_release_version: ${{ steps.get_release_version.outputs.next_release_version }}
    steps:
      - name: Get workflow run conclusion and commit SHA
        id: get_workflow_info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflowRun } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            const conclusion = workflowRun.conclusion;
            const headSha = workflowRun.head_commit.id;
            console.log(`Workflow run conclusion: ${conclusion}`);
            core.setOutput('conclusion', conclusion);
            core.setOutput('head_sha', headSha);

      - name: Get next release version from Release workflow outputs
        id: get_release_version
        if: ${{ steps.get_workflow_info.outputs.conclusion == 'success' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflowRun } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            const releaseJob = workflowRun.jobs.find(job => job.name === 'release');
            const nextReleaseVersion = releaseJob.outputs.next_release_version;
            console.log(`Next Release Version: ${nextReleaseVersion}`);
            core.setOutput('next_release_version', nextReleaseVersion);

  test:
    runs-on: ubuntu-latest
    needs: get_release_info
    if: ${{ needs.get_release_info.outputs.conclusion == 'success' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.get_release_info.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for checkout

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Run vitest tests in CI mode
        run: npm run test:ci

      - name: Build application with semantic version
        run: VITE_APP_VERSION=${{ needs.get_release_info.outputs.next_release_version }} npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: [get_release_info, test]
    if: ${{ needs.get_release_info.outputs.conclusion == 'success' && needs.test.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.get_release_info.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for checkout

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - uses: akhileshns/heroku-deploy@v3.14.15
        with:
            heroku_api_key: ${{secrets.HEROKU_API_KEY}}
            heroku_app_name: "nms-optimizer-web"
            heroku_email: "john.belew@gmail.com"

      - name: Set Heroku Config
        run: |
          # Set VITE_BUILD_VERSION to the GitHub Actions run number (build identifier)
          heroku config:set VITE_BUILD_VERSION=build-${{ github.run_number }} --app nms-optimizer-web
          # Set VITE_APP_VERSION to the semantic version from semantic-release
          heroku config:set VITE_APP_VERSION=${{ needs.get_release_info.outputs.next_release_version }} --app nms-optimizer-web